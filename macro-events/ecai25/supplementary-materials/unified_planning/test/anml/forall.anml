type Location;

fluent boolean visited(Location l);
fluent boolean precedes(Location precedes, Location successor);

action visit(Location to_visit) {
   duration := 3;
   [start] forall (Location p) {
      not precedes(p, to_visit) or visited(p);
      not visited(to_visit);
   };
   [end] visited(to_visit) := true;
};

[end] forall (Location l) {
   visited(l);
   forall(Location l2) {
      not precedes(l2, l) or visited(l2);
   };
};

instance Location l1, l2, l3;

[start] forall(Location lx) {visited(lx) := false;};

[start] precedes(l1, l2) := true;
[start] precedes(l1, l3) := true;
[start] precedes(l2, l3) := true;

[start] precedes(l1, l1) := false;

[start] precedes(l2, l1) := false;
[start] precedes(l2, l2) := false;

[start] precedes(l3, l1) := false;
[start] precedes(l3, l2) := false;
[start] precedes(l3, l3) := false;
