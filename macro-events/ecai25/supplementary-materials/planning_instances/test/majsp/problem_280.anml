type Position;
type Pallet;
type Robot;
fluent Position robot_at(Robot r);
fluent Pallet robot_has(Robot r);
fluent Pallet position_has(Position p);
fluent boolean at_depot(Pallet b);
fluent boolean treated(Pallet b, Position p);
fluent boolean ready(Pallet b, Position p);
fluent integer [0, 100] battery_level(Robot r);
action move(Robot r, Position to) {
   duration >= 1 and duration <= 1;
   [ start ] (not (to == UNKNOWN));
   [ start ] (not (robot_at(r) == to));
   [ start ] (not (robot_at(r) == UNKNOWN));
   [ start ] (1 <= battery_level(r));
   [ start ] battery_level(r) :decrease 1;
   [ start ] robot_at(r) := UNKNOWN;
   [ end ] robot_at(r) := to;
};
action load_at_depot(Robot r, Pallet p_0) {
   [ start ] (not (p_0 == NOPALLET));
   [ start ] (robot_has(r) == NOPALLET);
   [ start ] at_depot(p_0);
   [ start ] (robot_at(r) == DEPOT);
   [ start ] robot_has(r) := p_0;
   [ start ] at_depot(p_0) := false;
};
action unload_at_depot(Robot r) {
   [ start ] (not (robot_has(r) == NOPALLET));
   [ start ] (robot_at(r) == DEPOT);
   [ start ] position_has(DEPOT) := robot_has(r);
   [ start ] robot_has(r) := NOPALLET;
};
action make_treatment(Robot r, Pallet b, Position p) {
   duration >= 20 and duration <= 20;
   [ start ] (not (p == UNKNOWN));
   [ start ] (not (b == NOPALLET));
   [ start ] (not (p == DEPOT));
   [ start ] (position_has(p) == NOPALLET);
   [ start ] (robot_at(r) == p);
   [ start ] (robot_has(r) == b);
   [ start ] (not treated(b, p));
   [ end ] treated(b, p);
   [ end ] (position_has(p) == NOPALLET);
   [ start ] position_has(p) := b;
   [ start ] robot_has(r) := NOPALLET;
   [ start + 10 ] ready(b, p) := true;
};
action load(Robot r, Pallet b, Position p) {
   duration >= 1 and duration <= 1;
   [ start ] (not (p == UNKNOWN));
   [ start ] (not (b == NOPALLET));
   [ start ] (position_has(p) == b);
   [ start ] (robot_has(r) == NOPALLET);
   [ start ] ready(b, p);
   [ start ] (robot_at(r) == p);
   [ start ] ready(b, p) := false;
   [ start ] position_has(p) := NOPALLET;
   [ end ] robot_has(r) := b;
   [ end ] treated(b, p) := true;
};
instance Position UNKNOWN, DEPOT, p0, p1, p2;
instance Pallet NOPALLET, b0, b1, b2, b3;
instance Robot r0, r1, r2;
[ start ] robot_at(r0) := DEPOT;
[ start ] robot_at(r1) := DEPOT;
[ start ] robot_at(r2) := DEPOT;
[ start ] robot_has(r0) := NOPALLET;
[ start ] robot_has(r1) := NOPALLET;
[ start ] robot_has(r2) := NOPALLET;
[ start ] position_has(UNKNOWN) := NOPALLET;
[ start ] position_has(DEPOT) := NOPALLET;
[ start ] position_has(p0) := NOPALLET;
[ start ] position_has(p1) := NOPALLET;
[ start ] position_has(p2) := NOPALLET;
[ start ] at_depot(NOPALLET) := true;
[ start ] at_depot(b0) := true;
[ start ] at_depot(b1) := true;
[ start ] at_depot(b2) := true;
[ start ] at_depot(b3) := true;
[ start ] treated(NOPALLET, UNKNOWN) := false;
[ start ] treated(b0, UNKNOWN) := false;
[ start ] treated(b1, UNKNOWN) := false;
[ start ] treated(b2, UNKNOWN) := false;
[ start ] treated(b3, UNKNOWN) := false;
[ start ] treated(NOPALLET, DEPOT) := false;
[ start ] treated(b0, DEPOT) := false;
[ start ] treated(b1, DEPOT) := false;
[ start ] treated(b2, DEPOT) := false;
[ start ] treated(b3, DEPOT) := false;
[ start ] treated(NOPALLET, p0) := false;
[ start ] treated(b0, p0) := false;
[ start ] treated(b1, p0) := false;
[ start ] treated(b2, p0) := false;
[ start ] treated(b3, p0) := false;
[ start ] treated(NOPALLET, p1) := false;
[ start ] treated(b0, p1) := false;
[ start ] treated(b1, p1) := false;
[ start ] treated(b2, p1) := false;
[ start ] treated(b3, p1) := false;
[ start ] treated(NOPALLET, p2) := false;
[ start ] treated(b0, p2) := false;
[ start ] treated(b1, p2) := false;
[ start ] treated(b2, p2) := false;
[ start ] treated(b3, p2) := false;
[ start ] ready(NOPALLET, UNKNOWN) := false;
[ start ] ready(b0, UNKNOWN) := false;
[ start ] ready(b1, UNKNOWN) := false;
[ start ] ready(b2, UNKNOWN) := false;
[ start ] ready(b3, UNKNOWN) := false;
[ start ] ready(NOPALLET, DEPOT) := false;
[ start ] ready(b0, DEPOT) := false;
[ start ] ready(b1, DEPOT) := false;
[ start ] ready(b2, DEPOT) := false;
[ start ] ready(b3, DEPOT) := false;
[ start ] ready(NOPALLET, p0) := false;
[ start ] ready(b0, p0) := false;
[ start ] ready(b1, p0) := false;
[ start ] ready(b2, p0) := false;
[ start ] ready(b3, p0) := false;
[ start ] ready(NOPALLET, p1) := false;
[ start ] ready(b0, p1) := false;
[ start ] ready(b1, p1) := false;
[ start ] ready(b2, p1) := false;
[ start ] ready(b3, p1) := false;
[ start ] ready(NOPALLET, p2) := false;
[ start ] ready(b0, p2) := false;
[ start ] ready(b1, p2) := false;
[ start ] ready(b2, p2) := false;
[ start ] ready(b3, p2) := false;
[ start ] battery_level(r0) := 100;
[ start ] battery_level(r1) := 100;
[ start ] battery_level(r2) := 100;
[ end ] treated(b0, p0);
[ end ] treated(b1, p0);
[ end ] treated(b2, p0);
[ end ] treated(b3, p0);
[ end ] treated(b0, p1);
[ end ] treated(b1, p1);
[ end ] treated(b2, p1);
[ end ] treated(b3, p1);
[ end ] treated(b0, p2);
[ end ] treated(b1, p2);
[ end ] treated(b2, p2);
[ end ] treated(b3, p2);
